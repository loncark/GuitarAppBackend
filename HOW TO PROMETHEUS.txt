You need to have an instance of mysql container run on port 3306
for this to work.

application.properties:
-----------------------------------------------------------------
spring.jpa.show-sql=true
spring.datasource.url=jdbc:mysql://localhost:3306/testdb
spring.datasource.username=root
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.sql.init.mode=always

spring.main.allow-bean-definition-overriding=true

management.endpoints.web.base-path=/actuator
management.endpoints.web.exposure.include=health,info,prometheus
management.endpoint.health.show-details=always
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true
scrape_configs.job_name='guitar'
scrape_configs.metrics_path='/actuator/prometheus'
scrape_configs.scrape_interval=2s
scrape_configs.static_configs.targets=['http://localhost:9090']

server.port=7000
-----------------------------------------------------------------
Access then localhost:9090 and pick the metric to evaluate.

Adding custom metrics: add a MeterRegistry parameter in the
constructor of your controller and pick if you want it to be a
gauge (simple number), counter (sum total of sth) or a timer
(duration). Build the metric and it should appear under the
name you specified in /actuator/prometheus. For everything else
consult https://www.tutorialworks.com/spring-boot-prometheus-micrometer/

GRAFANA
1. Run the docker image:Ä‡
docker run -d --name=grafana -p 3000:3000 grafana/grafana

2. Access localhost:3000 and login with admin/admin credentials

3. Add new datasource -> Prometheus

4. Don't put localhost as url, but 172.27.16.1:9090 or whatever
port your Prometheus server is accessible from

5. GET request at the bottom, not POST

6. Save&Test should be green provided your app and Prometheus
server are running

7. Add new dashboard -> Graph -> Add Query -> Run Query